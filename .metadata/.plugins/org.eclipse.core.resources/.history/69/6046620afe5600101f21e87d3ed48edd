package com.tcs.cart.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.tcs.cart.entity.Cart;
import com.tcs.cart.service.CartService;
import com.tcs.cart.service.ReviewService;

@RestController
public class CartController {

	@Autowired
	private CartService cartService;
	
	@Autowired
	private ReviewService reviewService;
	
	@PostMapping("products/reviews/{customerId}/{productId}")
	public ResponseEntity<String> addReview(@PathVariable Long customerId, @PathVariable Long productId, @RequestParam Double rating,@RequestParam String review) {
		boolean result = reviewService.addReview(customerId, productId,rating, review);
		if(result)
			return ResponseEntity.ok().body("Review added Succesfully");
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Review cannot be added");
	}
	
	@PutMapping("/wishlists/{customerId}/{productId}")
	public ResponseEntity<String> addWishlist(@PathVariable Long customerId, @PathVariable Long productId) {
		boolean result = cartService.addWishlist(customerId, productId);
		if(result)
			return ResponseEntity.ok().body("wishlist added Succesfully");
	    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("wishlist cannot be added");
		
	}
	@DeleteMapping("/wishlists/{customerId}/{productId}")
	public ResponseEntity<String> removeWishlist(@PathVariable Long customerId, @PathVariable Long productId) {
		boolean result = cartService.removeWishlist(customerId, productId);
		if(result)
			return ResponseEntity.ok().body("wishlist deleted Succesfully");
	    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("wishlist cannot be deleted");
		
	}
	@PutMapping("/carts/{customerId}/{productId}") //update the cart increment the quantity by 1
	public ResponseEntity<String> updatecartItemQuantity(@PathVariable Long customerId, @PathVariable Long productId, @RequestParam Integer quantity ) {
		boolean result = cartService.updateCartItemQuantity(customerId, productId,quantity);
		if(result)
			return ResponseEntity.ok().body("updated Succesfully");
	    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Updation failed!!");
		
	}
	
		
	@DeleteMapping("/carts/{customerId}/{productId}")//delete the cart item by customer id and product id
	public ResponseEntity<String> deletecartItem(@PathVariable Long customerId, @PathVariable Long productId ) {
		boolean result = cartService.removeProductFromCart(customerId, productId);
		if(result)
			return ResponseEntity.ok().body("deleted Succesfully");
	    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("deletion failed!!");
		
	}
	@GetMapping("/carts/{customerId}")// get all the items by customerId from cart
	public ResponseEntity<Optional<Cart>> getAllcartItemsByCustomerId(@PathVariable Long customerId) {
		Optional<Cart> result = cartService.getAllCartItemsByCustomerId(customerId);
		if(!result.isEmpty()) return ResponseEntity.ok().body(result);
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);

	}
	@DeleteMapping("/carts/{customerId}")// delete all the items by customer id from cart
	public ResponseEntity<String> clearCart(@PathVariable Long customerId) {
		boolean result = cartService.clearCart(customerId);
		if(result)
			return ResponseEntity.ok().body("deleted Succesfully");
	    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("deletion failed!!");
	}
	
	@PostMapping("/carts/{customerId}/{productId}")
	ResponseEntity<String> addProductToCart(@PathVariable Long customerId, @PathVariable Long productId) { 
		boolean result = cartService.addProductToCart(customerId, productId);
		if(result)
			return ResponseEntity.ok().body("Added Sccessfully");
	    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product cannot be added!!");
		
	}
	
	@PostMapping("/carts/orders/{customerId}")
	ResponseEntity<String> placeOrder(@PathVariable Long customerId) {
		boolean result = cartService.buyProducts(customerId);
		if(result)
			return ResponseEntity.ok().body("Order Placed Sccessfully");
		 return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Order  cannot be placed!!");
	}
	}
